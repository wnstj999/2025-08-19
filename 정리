# 🗓️ 2025-08-19


## 📑 명령어 정리 표
| 명령어 | 설명 | 사용 시점 | 예시 |
|---|---|---|---|
| `git fetch [원격] [브랜치]` | 원격 최신 커밋을 로컬로 가져오기(병합 X) | 변경사항 확인, 충돌 사전 점검 | `git fetch origin` |
| `git pull [원격] [브랜치]` | 원격을 가져와 **현재 브랜치에 병합** | 내 브랜치를 최신화 | `git pull`, `git pull origin main` |
| `git checkout -b <브랜치>` | 새 브랜치 생성 및 전환 | 기능/버그 단위 작업 시작 | `git checkout -b feature/login` |
| `git clone <URL>` | 원격 저장소 복제 | 첫 환경 세팅 | `git clone https://github.com/ORG/REPO.git` |
| `git remote add upstream <URL>` | 포크한 레포에 원본을 upstream으로 등록 | 포크 동기화 준비 | `git remote add upstream https://github.com/ORG/REPO.git` |
| `git merge upstream/main` | upstream 변경을 병합 | 포크 최신화 | `git checkout main && git fetch upstream && git merge upstream/main` |
| `git push -u origin <브랜치>` | 새 브랜치 원격 푸시 및 추적 설정 | 최초 원격 업로드 | `git push -u origin feature/login` |
| `cd`, `cd ..`, `cd /` | 폴더 이동 (현재/상위/최상위) | 터미널 탐색 | `cd project`, `cd ..` |
| `ls` / `dir` | 파일/폴더 목록 보기 (macOS/Linux / Windows) | 디렉터리 확인 | `ls -al` / `dir` |


## 🔁 협업 워크플로 표
| 시나리오 | 단계(Flow) | 핵심 명령/행동 | 비고 |
|---|---|---|---|
| **Collaborator** (권한 有) | `clone` → `checkout -b` → 작업/커밋 → `push` → PR/리뷰/머지 | `git clone`, `git checkout -b`, `git push -u origin` | 단순/직접, 원본에 직접 영향 가능 |
| **Forking** (권한 無) | GitHub **Fork** → 내 레포 `clone` → `remote add upstream` → 작업/커밋 → 내 origin에 `push` → **PR → upstream** | `git remote add upstream`, `git fetch upstream`, `git merge upstream/main` | 안전/원본 보호, 동기화 필요 |
| **Upstream 동기화** | `checkout main` → `fetch upstream` → `merge upstream/main` → `push origin main` | `git fetch upstream`, `git merge upstream/main` | 포크 최신 반영 루틴 |
| **브랜치 전략** | 기능=feature/, 버그=hotfix/, 릴리스=release/, 라인=main/develop | 네이밍 예: `feature/auth-ui` | PR 단위 작게, 커밋 메시지 명확 |


## 🧠 용어 정리 표
| 용어 | 정의 | 연관 | 주의점 |
|---|---|---|---|
| **GNB (gNodeB)** | 5G 기지국 (CU/DU/RU 구성) | 무선 제어(RRC), 핸드오버, 사용자 데이터 | CU/DU/RU 분리 아키텍처 이해 필요 |
| **CU / DU / RU** | 중앙/분산/무선 유닛 | 프런트홀·미드홀·백홀 | 지연·배치 고려 필수 |
| **LNB** | 위성 수신 신호를 저잡음으로 중주파(IF) 변환 | 위성 수신 시스템 | 케이블/전원/LO 주파수 설정 |
| **Fork** | 원본을 내 계정으로 복제한 원격 저장소 | upstream(원본), origin(내 포크) | upstream 주기적 동기화 필요 |
| **PR (Pull Request)** | 변경 제안 및 코드 리뷰 | 코드 리뷰, CI/CD | 단위 작게, 설명 명확 |
| **Upstream** | 포크의 원본 저장소 리모트명 | `git remote add upstream` | 잘못 push하지 않도록 주의 |


## 📋 참고 스니펫
```bash
# Collaborator 흐름
git clone https://github.com/ORG/REPO.git
cd REPO
git checkout -b feature/awesome
# 작업/커밋 후
git push -u origin feature/awesome
# → GitHub에서 PR 생성


# Fork 흐름
git clone https://github.com/MYID/REPO.git
cd REPO
git remote add upstream https://github.com/ORG/REPO.git
# 원본 동기화 루틴
git checkout main && git fetch upstream && git merge upstream/main && git push origin main
# 기능 브랜치 작업
git checkout -b feature/awesome
```
